public class org.hamcrest.CoreMatchers {
  public org.hamcrest.CoreMatchers();
  public static <T> org.hamcrest.Matcher<T> allOf(java.lang.Iterable<org.hamcrest.Matcher<? super T>>);
  public static <T> org.hamcrest.Matcher<T> allOf(org.hamcrest.Matcher<? super T>...);
  public static <T> org.hamcrest.Matcher<T> allOf(org.hamcrest.Matcher<? super T>, org.hamcrest.Matcher<? super T>);
  public static <T> org.hamcrest.Matcher<T> allOf(org.hamcrest.Matcher<? super T>, org.hamcrest.Matcher<? super T>, org.hamcrest.Matcher<? super T>);
  public static <T> org.hamcrest.Matcher<T> allOf(org.hamcrest.Matcher<? super T>, org.hamcrest.Matcher<? super T>, org.hamcrest.Matcher<? super T>, org.hamcrest.Matcher<? super T>);
  public static <T> org.hamcrest.Matcher<T> allOf(org.hamcrest.Matcher<? super T>, org.hamcrest.Matcher<? super T>, org.hamcrest.Matcher<? super T>, org.hamcrest.Matcher<? super T>, org.hamcrest.Matcher<? super T>);
  public static <T> org.hamcrest.Matcher<T> allOf(org.hamcrest.Matcher<? super T>, org.hamcrest.Matcher<? super T>, org.hamcrest.Matcher<? super T>, org.hamcrest.Matcher<? super T>, org.hamcrest.Matcher<? super T>, org.hamcrest.Matcher<? super T>);
  public static <T> org.hamcrest.core.AnyOf<T> anyOf(java.lang.Iterable<org.hamcrest.Matcher<? super T>>);
  public static <T> org.hamcrest.core.AnyOf<T> anyOf(org.hamcrest.Matcher<T>, org.hamcrest.Matcher<? super T>, org.hamcrest.Matcher<? super T>);
  public static <T> org.hamcrest.core.AnyOf<T> anyOf(org.hamcrest.Matcher<T>, org.hamcrest.Matcher<? super T>, org.hamcrest.Matcher<? super T>, org.hamcrest.Matcher<? super T>);
  public static <T> org.hamcrest.core.AnyOf<T> anyOf(org.hamcrest.Matcher<T>, org.hamcrest.Matcher<? super T>, org.hamcrest.Matcher<? super T>, org.hamcrest.Matcher<? super T>, org.hamcrest.Matcher<? super T>);
  public static <T> org.hamcrest.core.AnyOf<T> anyOf(org.hamcrest.Matcher<T>, org.hamcrest.Matcher<? super T>, org.hamcrest.Matcher<? super T>, org.hamcrest.Matcher<? super T>, org.hamcrest.Matcher<? super T>, org.hamcrest.Matcher<? super T>);
  public static <T> org.hamcrest.core.AnyOf<T> anyOf(org.hamcrest.Matcher<T>, org.hamcrest.Matcher<? super T>);
  public static <T> org.hamcrest.core.AnyOf<T> anyOf(org.hamcrest.Matcher<? super T>...);
  public static <LHS> org.hamcrest.core.CombinableMatcher$CombinableBothMatcher<LHS> both(org.hamcrest.Matcher<? super LHS>);
  public static <LHS> org.hamcrest.core.CombinableMatcher$CombinableEitherMatcher<LHS> either(org.hamcrest.Matcher<? super LHS>);
  public static <T> org.hamcrest.Matcher<T> describedAs(java.lang.String, org.hamcrest.Matcher<T>, java.lang.Object...);
  public static <U> org.hamcrest.Matcher<java.lang.Iterable<U>> everyItem(org.hamcrest.Matcher<U>);
  public static <T> org.hamcrest.Matcher<T> is(T);
  public static <T> org.hamcrest.Matcher<T> is(org.hamcrest.Matcher<T>);
  public static <T> org.hamcrest.Matcher<T> is(java.lang.Class<T>);
  public static <T> org.hamcrest.Matcher<T> isA(java.lang.Class<T>);
  public static org.hamcrest.Matcher<java.lang.Object> anything();
  public static org.hamcrest.Matcher<java.lang.Object> anything(java.lang.String);
  public static <T> org.hamcrest.Matcher<java.lang.Iterable<? super T>> hasItem(T);
  public static <T> org.hamcrest.Matcher<java.lang.Iterable<? super T>> hasItem(org.hamcrest.Matcher<? super T>);
  public static <T> org.hamcrest.Matcher<java.lang.Iterable<T>> hasItems(T...);
  public static <T> org.hamcrest.Matcher<java.lang.Iterable<T>> hasItems(org.hamcrest.Matcher<? super T>...);
  public static <T> org.hamcrest.Matcher<T> equalTo(T);
  public static <T> org.hamcrest.Matcher<T> any(java.lang.Class<T>);
  public static <T> org.hamcrest.Matcher<T> instanceOf(java.lang.Class<?>);
  public static <T> org.hamcrest.Matcher<T> not(org.hamcrest.Matcher<T>);
  public static <T> org.hamcrest.Matcher<T> not(T);
  public static org.hamcrest.Matcher<java.lang.Object> nullValue();
  public static <T> org.hamcrest.Matcher<T> nullValue(java.lang.Class<T>);
  public static org.hamcrest.Matcher<java.lang.Object> notNullValue();
  public static <T> org.hamcrest.Matcher<T> notNullValue(java.lang.Class<T>);
  public static <T> org.hamcrest.Matcher<T> sameInstance(T);
  public static <T> org.hamcrest.Matcher<T> theInstance(T);
  public static org.hamcrest.Matcher<java.lang.String> containsString(java.lang.String);
  public static org.hamcrest.Matcher<java.lang.String> startsWith(java.lang.String);
  public static org.hamcrest.Matcher<java.lang.String> endsWith(java.lang.String);
}
